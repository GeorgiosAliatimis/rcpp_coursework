// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stable_matching_string
std::unordered_map<std::string,std::string> stable_matching_string(std::vector<std::vector<std::string>> proposer_matrix, std::vector<std::string> proposer_syms, std::vector<std::vector<std::string>> acceptor_matrix, std::vector<std::string> acceptor_syms);
RcppExport SEXP _praxi_stable_matching_string(SEXP proposer_matrixSEXP, SEXP proposer_symsSEXP, SEXP acceptor_matrixSEXP, SEXP acceptor_symsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type proposer_matrix(proposer_matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type proposer_syms(proposer_symsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type acceptor_matrix(acceptor_matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type acceptor_syms(acceptor_symsSEXP);
    rcpp_result_gen = Rcpp::wrap(stable_matching_string(proposer_matrix, proposer_syms, acceptor_matrix, acceptor_syms));
    return rcpp_result_gen;
END_RCPP
}
// stable_matching_int
std::unordered_map<int,int> stable_matching_int(std::vector<std::vector<int>> proposer_matrix, std::vector<int> proposer_syms, std::vector<std::vector<int>> acceptor_matrix, std::vector<int> acceptor_syms);
RcppExport SEXP _praxi_stable_matching_int(SEXP proposer_matrixSEXP, SEXP proposer_symsSEXP, SEXP acceptor_matrixSEXP, SEXP acceptor_symsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type proposer_matrix(proposer_matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type proposer_syms(proposer_symsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type acceptor_matrix(acceptor_matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type acceptor_syms(acceptor_symsSEXP);
    rcpp_result_gen = Rcpp::wrap(stable_matching_int(proposer_matrix, proposer_syms, acceptor_matrix, acceptor_syms));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_praxi_stable_matching_string", (DL_FUNC) &_praxi_stable_matching_string, 4},
    {"_praxi_stable_matching_int", (DL_FUNC) &_praxi_stable_matching_int, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_praxi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
